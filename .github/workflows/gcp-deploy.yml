name: Deploy to GCP

on:
  push:
    branches: [ master-server ]
  workflow_dispatch:

env:
  GCE_INSTANCE: "instance-20250422-132526" # Micro VM instance
  GCE_INSTANCE_ZONE: "asia-south1-c"
  
jobs:
  build:
    name: Build Go Binary
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Build
      run: |
        go build -v -o trademicro
        
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: trademicro-binary
        path: trademicro
        
  deploy:
    name: Deploy to GCP
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: trademicro-binary
        
    # Set up gcloud CLI
    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        
    # Create service account key file from secret
    - name: Create service account key file
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
        # Verify the file is valid JSON
        jq . /tmp/service-account-key.json || { echo "Error: Invalid JSON in service account key file"; exit 1; }
      shell: bash
      
    # Authenticate with Google Cloud
    - name: Authenticate with Google Cloud
      run: |
        gcloud auth activate-service-account --key-file=/tmp/service-account-key.json
        gcloud config set project '${{ secrets.GCP_PROJECT_ID }}'
      shell: bash
        
    # gcloud CLI is already installed by the setup-gcloud action
        
    - name: Add SSH key to GCP VM
      run: |
        # Create SSH key deployment script
        cat > deploy_ssh_key.sh << 'EOF'
        #!/bin/bash
        
        # Script to add SSH key to Google Cloud VM instance
        
        # Variables
        SSH_KEY_CONTENT="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCvRoU3du0C6+uzymAhnhjCUXknU+T4SRV5MACWidc3vLSwr9NgsWMv2h4rVRULNQO5oIBFzCtZazLG81evlOITnROT5ySa/o7LIStth3G2XbQXV058f0gNl/+aUr0LxWf8D3jrx69VfFwmfFWeO4Y9PuaUD90aB1HObPNEcSm1xawKCvE/ctA48WRqwc/6fTZDoh5RaM93Iv+3X85/1ZfDvXr1XU4QJzyGezODh9VwfTkbpK8SYnoov9uaYCfVhV0gecPnTzHfjRbJe/sGVswzI7Fr27uh872+WCpbren1ptyapteSanX+ZEh1CVgZWSGEqGvnMbCIxFDCW3hZcVkIbbRUzydX+xMXbKoyaWhquTD0UzDQFOCRxrAhNnJwPCKDvyEuqDw4RDCiCOGB+hcoQ7HF5cxeigl9grL7IT4eyodszEbSGVX9EPw3Edlb0tYx0BdMmdY1u++RB2a4m9O0wuRw1IRWX4+B3PC5yRi3CWPmZtrnmLXH78HvO5YttfE="
        USERNAME="vikasavnish"
        
        # Format the key with username
        FORMATTED_KEY="$USERNAME:$SSH_KEY_CONTENT"
        
        # Add the SSH key to the instance metadata
        gcloud compute instances add-metadata "$GCE_INSTANCE" \
            --project="$GCP_PROJECT_ID" \
            --zone="$GCE_INSTANCE_ZONE" \
            --metadata="ssh-keys=$FORMATTED_KEY"
        
        echo "SSH key has been added to $GCE_INSTANCE"
        EOF
        chmod +x deploy_ssh_key.sh
        
        # Execute the script with environment variables
        GCP_PROJECT_ID="$GCP_PROJECT_ID" GCE_INSTANCE="$GCE_INSTANCE" GCE_INSTANCE_ZONE="$GCE_INSTANCE_ZONE" ./deploy_ssh_key.sh
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCE_INSTANCE: "instance-20250422-132526"
        GCE_INSTANCE_ZONE: "asia-south1-c"
        
    - name: Create deployment scripts
      env:
        POSTGRES_DSN: ${{ secrets.POSTGRES_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        # Create a minimal server setup script for first-time installation
        cat > server_setup.sh << 'EOF'
        #!/bin/bash
        
        # TradeMicro API Server Setup Script
        
        # Configuration
        APP_DIR="/opt/trademicro"
        APP_PORT=8000
        
        # Create application directory
        mkdir -p $APP_DIR
        
        # Copy the binary
        cp /tmp/trademicro $APP_DIR/
        chmod +x $APP_DIR/trademicro
        
        # Create environment file with database credentials
        cat > $APP_DIR/.env << ENVEOF
        POSTGRES_URL=${POSTGRES_DSN}
        REDIS_URL=${REDIS_URL}
        SECRET_KEY=${SECRET_KEY}
        PORT=${APP_PORT}
        SERVER_ROLE=micro
        ENVEOF
        
        # Create systemd service
        cat > /etc/systemd/system/trademicro.service << SERVICEEOF
        [Unit]
        Description=TradeMicro Go API
        After=network.target
        
        [Service]
        User=root
        Group=root
        WorkingDirectory=$APP_DIR
        EnvironmentFile=$APP_DIR/.env
        ExecStart=$APP_DIR/trademicro
        Restart=always
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
        
        # Enable and start service
        systemctl daemon-reload
        systemctl enable trademicro
        systemctl start trademicro
        
        echo "TradeMicro API has been set up successfully!"
        EOF
        chmod +x server_setup.sh
        
    - name: Check if first deployment
      id: check-deployment
      run: |
        # Check if this is a first-time deployment
        FIRST_DEPLOY=$(gcloud compute ssh --zone ${{ env.GCE_INSTANCE_ZONE }} ${{ env.GCE_INSTANCE }} --command="test -f /opt/trademicro/trademicro || echo 'first'" || echo "first")
        if [[ $FIRST_DEPLOY == *"first"* ]]; then
          echo "first_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "first_deploy=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Deploy to GCP instance (First-time)
      if: steps.check-deployment.outputs.first_deploy == 'true'
      run: |
        echo "Performing first-time deployment..."
        
        # Copy only the binary and setup script
        echo "Copying files to instance..."
        gcloud compute scp --zone ${{ env.GCE_INSTANCE_ZONE }} trademicro ${{ env.GCE_INSTANCE }}:/tmp/ --quiet
        gcloud compute scp --zone ${{ env.GCE_INSTANCE_ZONE }} server_setup.sh ${{ env.GCE_INSTANCE }}:/tmp/ --quiet
        
        # Execute setup script directly
        echo "Executing setup script..."
        gcloud compute ssh --zone ${{ env.GCE_INSTANCE_ZONE }} ${{ env.GCE_INSTANCE }} --command="sudo chmod +x /tmp/server_setup.sh && sudo /tmp/server_setup.sh" --quiet
        
    - name: Deploy to GCP instance (Update only)
      if: steps.check-deployment.outputs.first_deploy == 'false'
      run: |
        echo "Performing binary update only..."
        
        # Copy only the binary to the instance
        echo "Copying binary to instance..."
        gcloud compute scp --zone ${{ env.GCE_INSTANCE_ZONE }} trademicro ${{ env.GCE_INSTANCE }}:/tmp/ --quiet
        
        # Simple one-line command to update the binary and restart the service
        echo "Updating binary and restarting service..."
        gcloud compute ssh --zone ${{ env.GCE_INSTANCE_ZONE }} ${{ env.GCE_INSTANCE }} --command="sudo systemctl stop trademicro && sudo cp /tmp/trademicro /opt/trademicro/ && sudo chmod +x /opt/trademicro/trademicro && sudo systemctl start trademicro" --quiet
