name: Build and Deploy TradeMicro API

on:
  push:
    branches: [ main, master, master-server ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (production, staging)'
        required: true
        default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Build application
      run: |
        go mod download
        go build -o trademicro main.go
        
    - name: Run tests
      run: go test ./...
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: trademicro-binary
        path: trademicro
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: trademicro-binary
        
    - name: Make binary executable
      run: chmod +x trademicro
        
    - name: Set up SSH connection
      run: |
        mkdir -p ~/.ssh
        # Use existing SSH configuration from secrets
        echo "${{ secrets.SSH_HOST }} ${{ secrets.SSH_KEY }}" >> ~/.ssh/known_hosts
        echo "${{ secrets.SSH_PASSWORD }}" > ~/.ssh/password.txt
        chmod 600 ~/.ssh/password.txt
        
    - name: Create server deployment script
      env:
        # Database and service credentials from prod environment
        POSTGRES_DSN: ${{ secrets.POSTGRES_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        # Create deployment script with environment variables
        cat > server_deploy.sh << EOF
        #!/bin/bash
        
        # TradeMicro API Server Deployment Script
        # Generated by GitHub Actions
        
        # Configuration
        APP_DIR="/opt/trademicro"
        APP_PORT=8000
        POSTGRES_DSN="${POSTGRES_DSN}"
        REDIS_URL="${REDIS_URL}"
        SECRET_KEY="${SECRET_KEY}"
        
        # Colors for output
        GREEN="\033[0;32m"
        YELLOW="\033[1;33m"
        RED="\033[0;31m"
        NC="\033[0m" # No Color
        
        echo -e "\${GREEN}Starting TradeMicro API server deployment...\${NC}"
        
        # Check if running as root
        if [ "\$(id -u)" -ne 0 ]; then
            echo -e "\${RED}This script must be run as root\${NC}"
            exit 1
        fi
        
        # Check if this is a first-time installation or an update
        FIRST_INSTALL=false
        if [ ! -f "/etc/systemd/system/trademicro.service" ] || [ ! -d "\$APP_DIR" ]; then
            FIRST_INSTALL=true
            echo -e "\${YELLOW}First-time installation detected. Setting up all components...\${NC}"
        else
            echo -e "\${YELLOW}Existing installation detected. Performing update only...\${NC}"
        fi
        
        # Only update system packages and install services on first install
        if [ "\$FIRST_INSTALL" = true ]; then
            # Update system packages
            echo -e "\${YELLOW}Updating system packages...\${NC}"
            apt update && apt upgrade -y
            
            # Install Redis if not already installed
            echo -e "\${YELLOW}Installing Redis...\${NC}"
            apt install -y redis-server
            
            # Install Nginx if not already installed
            echo -e "\${YELLOW}Installing Nginx...\${NC}"
            apt install -y nginx
        fi
        
        # Create application directory if it doesn't exist
        if [ ! -d "\$APP_DIR" ]; then
            echo -e "\${YELLOW}Creating application directory...\${NC}"
            mkdir -p \$APP_DIR
        fi
        
        # Stop the service before updating binary
        if systemctl is-active --quiet trademicro; then
            echo -e "\${YELLOW}Stopping TradeMicro service...\${NC}"
            systemctl stop trademicro
        fi
        
        # Backup the existing binary if it exists
        if [ -f "\$APP_DIR/trademicro" ]; then
            echo -e "\${YELLOW}Backing up existing binary...\${NC}"
            mv "\$APP_DIR/trademicro" "\$APP_DIR/trademicro.bak.\$(date +%Y%m%d%H%M%S)"
        fi
        
        # Copy the Go binary to the server
        echo -e "\${YELLOW}Copying application binary...\${NC}"
        cp ./trademicro \$APP_DIR/
        chmod +x \$APP_DIR/trademicro
        
        # Create or update environment file
        if [ ! -f "\$APP_DIR/.env" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Creating environment file...\${NC}"
            cat > \$APP_DIR/.env << ENVEOF
        POSTGRES_URL=\$POSTGRES_DSN
        REDIS_URL=\$REDIS_URL
        SECRET_KEY=\$SECRET_KEY
        PORT=\$APP_PORT
        ENVEOF
        else
            echo -e "\${YELLOW}Using existing environment file...\${NC}"
        fi
        
        # Create systemd service if it doesn't exist
        if [ ! -f "/etc/systemd/system/trademicro.service" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Creating systemd service...\${NC}"
            cat > /etc/systemd/system/trademicro.service << SERVICEEOF
        [Unit]
        Description=TradeMicro Go API
        After=network.target
        
        [Service]
        User=root
        Group=root
        WorkingDirectory=\$APP_DIR
        EnvironmentFile=\$APP_DIR/.env
        ExecStart=\$APP_DIR/trademicro
        Restart=always
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
            
            # Enable service on first install
            echo -e "\${YELLOW}Enabling service...\${NC}"
            systemctl enable trademicro
        else
            echo -e "\${YELLOW}Using existing systemd service configuration...\${NC}"
        fi
        
        # Reload systemd and start service
        echo -e "\${YELLOW}Reloading systemd and starting service...\${NC}"
        systemctl daemon-reload
        systemctl start trademicro
        
        # Configure Nginx if it's first install
        if [ ! -f "/etc/nginx/sites-available/trademicro" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Configuring Nginx...\${NC}"
            cat > /etc/nginx/sites-available/trademicro << NGINXEOF
        server {
            listen 80;
            server_name \\\$hostname;
        
            location / {
                proxy_pass http://127.0.0.1:\\\$APP_PORT;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \\\$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \\\$host;
                proxy_set_header X-Real-IP \\\$remote_addr;
            }
        }
        NGINXEOF
            
            # Enable Nginx site
            ln -sf /etc/nginx/sites-available/trademicro /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx
        else
            echo -e "\${YELLOW}Using existing Nginx configuration...\${NC}"
        fi
        
        # Check if service is running
        if systemctl is-active --quiet trademicro; then
            echo -e "\${GREEN}TradeMicro API has been successfully \${FIRST_INSTALL:+installed:updated}!\${NC}"
            SERVER_IP=\$(hostname -I | awk '{print \$1}')
            echo -e "\${GREEN}Your API is accessible at: http://\$SERVER_IP\${NC}"
            
            echo -e "\\n\${YELLOW}To check service status:\${NC}"
            echo -e "systemctl status trademicro"
            
            echo -e "\\n\${YELLOW}To view logs:\${NC}"
            echo -e "journalctl -u trademicro"
        else
            echo -e "\${RED}Deployment failed. Service is not running.\${NC}"
            echo -e "\${YELLOW}Check logs with: journalctl -u trademicro\${NC}"
        fi
        EOF
        
        chmod +x server_deploy.sh
        
    - name: Deploy using sshpass
      run: |
        # Install sshpass
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        # Copy files to server
        echo "Copying files to server ${{ secrets.SSH_HOST }}..."
        sshpass -f ~/.ssh/password.txt scp -o StrictHostKeyChecking=no trademicro server_deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        
        # Execute deployment script
        echo "Executing deployment script on server..."
        sshpass -f ~/.ssh/password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /tmp && chmod +x server_deploy.sh && ./server_deploy.sh"
