name: Build and Deploy TradeMicro API

on:
  push:
    branches: [ main, master, master-server ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (production, staging)'
        required: true
        default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
        
    - name: Build Go application
      run: |
        go mod download
        go build -o trademicro main.go
        
    - name: Run tests
      run: go test ./...
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: trademicro-binary
        path: trademicro
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: trademicro-binary
        
    - name: Make binary executable
      run: chmod +x trademicro
        
    - name: Set up SSH connection
      run: |
        mkdir -p ~/.ssh
        # Use existing SSH configuration from secrets
        echo "${{ secrets.SSH_HOST }} ${{ secrets.SSH_KEY }}" >> ~/.ssh/known_hosts
        echo "${{ secrets.SSH_PASSWORD }}" > ~/.ssh/password.txt
        chmod 600 ~/.ssh/password.txt
        
    - name: Add SSH key to server
      run: |
        # Create SSH key deployment script
        cat > deploy_ssh_key.sh << 'EOF'
        #!/bin/bash
        
        # Script to add SSH key to server
        
        # Variables
        SSH_KEY_CONTENT="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCvRoU3du0C6+uzymAhnhjCUXknU+T4SRV5MACWidc3vLSwr9NgsWMv2h4rVRULNQO5oIBFzCtZazLG81evlOITnROT5ySa/o7LIStth3G2XbQXV058f0gNl/+aUr0LxWf8D3jrx69VfFwmfFWeO4Y9PuaUD90aB1HObPNEcSm1xawKCvE/ctA48WRqwc/6fTZDoh5RaM93Iv+3X85/1ZfDvXr1XU4QJzyGezODh9VwfTkbpK8SYnoov9uaYCfVhV0gecPnTzHfjRbJe/sGVswzI7Fr27uh872+WCpbren1ptyapteSanX+ZEh1CVgZWSGEqGvnMbCIxFDCW3hZcVkIbbRUzydX+xMXbKoyaWhquTD0UzDQFOCRxrAhNnJwPCKDvyEuqDw4RDCiCOGB+hcoQ7HF5cxeigl9grL7IT4eyodszEbSGVX9EPw3Edlb0tYx0BdMmdY1u++RB2a4m9O0wuRw1IRWX4+B3PC5yRi3CWPmZtrnmLXH78HvO5YttfE="
        USERNAME="vikasavnish"
        
        # Format the key with username
        FORMATTED_KEY="$USERNAME:$SSH_KEY_CONTENT"
        
        # Add the SSH key to the authorized_keys file on the server
        sshpass -f ~/.ssh/password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/.ssh && echo '$FORMATTED_KEY' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"
        
        echo "SSH key has been added to the server"
        EOF
        chmod +x deploy_ssh_key.sh
        
        # Execute the script
        ./deploy_ssh_key.sh
        
    - name: Create deployment scripts
      env:
        # Database and service credentials from prod environment
        POSTGRES_DSN: ${{ secrets.POSTGRES_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        # Create a simple server setup script for first-time installation
        cat > server_setup.sh << 'EOF'
        #!/bin/bash
        
        # TradeMicro API Server Setup Script
        
        # Configuration
        APP_DIR="/opt/trademicro"
        APP_PORT=8000
        
        # Create application directory
        mkdir -p $APP_DIR
        
        # Copy the binary
        cp ./trademicro $APP_DIR/
        chmod +x $APP_DIR/trademicro
        
        # Create environment file
        cat > $APP_DIR/.env << ENVEOF
        POSTGRES_URL=${POSTGRES_DSN}
        REDIS_URL=${REDIS_URL}
        SECRET_KEY=${SECRET_KEY}
        PORT=${APP_PORT}
        ENVEOF
        
        # Create systemd service
        cat > /etc/systemd/system/trademicro.service << SERVICEEOF
        [Unit]
        Description=TradeMicro Go API
        After=network.target
        
        [Service]
        User=root
        Group=root
        WorkingDirectory=$APP_DIR
        EnvironmentFile=$APP_DIR/.env
        ExecStart=$APP_DIR/trademicro
        Restart=always
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
        
        # Enable and start service
        systemctl daemon-reload
        systemctl enable trademicro
        systemctl start trademicro
        
        echo "TradeMicro API has been set up successfully!"
        EOF
        cat > server_deploy.sh << EOF
        #!/bin/bash
        
        # TradeMicro API Server Deployment Script
        # Generated by GitHub Actions
        
        # Configuration
        APP_DIR="/opt/trademicro"
        APP_PORT=8000
        POSTGRES_DSN="${POSTGRES_DSN}"
        REDIS_URL="${REDIS_URL}"
        SECRET_KEY="${SECRET_KEY}"
        
        # Colors for output
        GREEN="\033[0;32m"
        YELLOW="\033[1;33m"
        RED="\033[0;31m"
        NC="\033[0m" # No Color
        
        echo -e "\${GREEN}Starting TradeMicro API server deployment...\${NC}"
        
        # Check if running as root
        if [ "\$(id -u)" -ne 0 ]; then
            echo -e "\${RED}This script must be run as root\${NC}"
            exit 1
        fi
        
        # Check if this is a first-time installation or an update
        FIRST_INSTALL=false
        if [ ! -f "/etc/systemd/system/trademicro.service" ] || [ ! -d "\$APP_DIR" ]; then
            FIRST_INSTALL=true
            echo -e "\${YELLOW}First-time installation detected. Setting up all components...\${NC}"
        else
            echo -e "\${YELLOW}Existing installation detected. Performing update only...\${NC}"
        fi
        
        # Only update system packages and install services on first install
        if [ "\$FIRST_INSTALL" = true ]; then
            # Minimal update for smaller machine
            echo -e "\${YELLOW}Installing only essential packages...\${NC}"
            export DEBIAN_FRONTEND=noninteractive
            # Only install nginx if not already installed
            if ! command -v nginx &> /dev/null; then
                apt-get update -y --no-install-recommends
                apt-get install -y --no-install-recommends nginx
            fi
            
            # Check if Redis is needed and install only if required
            if [[ "$REDIS_URL" == *"localhost"* || "$REDIS_URL" == *"127.0.0.1"* ]]; then
                echo -e "\${YELLOW}Installing Redis (minimal)...\${NC}"
                apt-get install -y --no-install-recommends redis-server
                # Configure Redis to use less memory
                if [ -f "/etc/redis/redis.conf" ]; then
                    sed -i 's/^maxmemory .*/maxmemory 64mb/' /etc/redis/redis.conf
                    sed -i 's/^# maxmemory-policy .*/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
                fi
                systemctl enable redis-server
            else
                echo -e "\${YELLOW}Skipping Redis installation (using external Redis)...\${NC}"
            fi           
            # Nginx is already handled in the previous step
        fi
        
        # Create application directory if it doesn't exist
        if [ ! -d "\$APP_DIR" ]; then
            echo -e "\${YELLOW}Creating application directory...\${NC}"
            mkdir -p \$APP_DIR
        fi
        
        # Stop the service before updating binary
        if systemctl is-active --quiet trademicro; then
            echo -e "\${YELLOW}Stopping TradeMicro service...\${NC}"
            systemctl stop trademicro
        fi
        
        # Backup the existing binary if it exists
        if [ -f "\$APP_DIR/trademicro" ]; then
            echo -e "\${YELLOW}Backing up existing binary...\${NC}"
            mv "\$APP_DIR/trademicro" "\$APP_DIR/trademicro.bak.\$(date +%Y%m%d%H%M%S)"
        fi
        
        # Copy the Go binary to the server
        echo -e "\${YELLOW}Copying application binary...\${NC}"
        cp ./trademicro \$APP_DIR/
        chmod +x \$APP_DIR/trademicro
        
        # Create or update environment file
        if [ ! -f "\$APP_DIR/.env" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Creating environment file...\${NC}"
            cat > \$APP_DIR/.env << ENVEOF
        POSTGRES_URL=\$POSTGRES_DSN
        REDIS_URL=\$REDIS_URL
        SECRET_KEY=\$SECRET_KEY
        PORT=\$APP_PORT
        ENVEOF
        else
            echo -e "\${YELLOW}Using existing environment file...\${NC}"
        fi
        
        # Create systemd service if it doesn't exist
        if [ ! -f "/etc/systemd/system/trademicro.service" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Creating systemd service...\${NC}"
            cat > /etc/systemd/system/trademicro.service << SERVICEEOF
        [Unit]
        Description=TradeMicro Go API
        After=network.target
        
        [Service]
        User=root
        Group=root
        WorkingDirectory=\$APP_DIR
        EnvironmentFile=\$APP_DIR/.env
        ExecStart=\$APP_DIR/trademicro
        Restart=always
        RestartSec=5
        # Resource limits for smaller machine
        MemoryLimit=128M
        CPUQuota=30%
        IOWeight=100
        OOMScoreAdjust=-100
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
            
            # Enable service on first install
            echo -e "\${YELLOW}Enabling service...\${NC}"
            systemctl enable trademicro
        else
            echo -e "\${YELLOW}Using existing systemd service configuration...\${NC}"
        fi
        
        # Reload systemd and start service
        echo -e "\${YELLOW}Reloading systemd and starting service...\${NC}"
        systemctl daemon-reload
        systemctl start trademicro
        
        # Configure Nginx if it's first install
        if [ ! -f "/etc/nginx/sites-available/trademicro" ] || [ "\$FIRST_INSTALL" = true ]; then
            echo -e "\${YELLOW}Configuring Nginx...\${NC}"
            # Create a lightweight Nginx config for smaller machines
            cat > /etc/nginx/sites-available/trademicro << NGINXEOF
        server {
            listen 80;
            server_name \$hostname;
            access_log off;
            error_log /var/log/nginx/error.log crit;
            
            # Buffer size optimizations
            client_body_buffer_size 10k;
            client_header_buffer_size 1k;
            client_max_body_size 8m;
            
            location / {
                proxy_pass http://127.0.0.1:\$APP_PORT;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_buffers 4 16k;
            }
        }
        NGINXEOF
            
            # Enable Nginx site
            ln -sf /etc/nginx/sites-available/trademicro /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx
        else
            echo -e "\${YELLOW}Using existing Nginx configuration...\${NC}"
        fi
        
        # Check if service is running
        if systemctl is-active --quiet trademicro; then
            echo -e "\${GREEN}TradeMicro API has been successfully \${FIRST_INSTALL:+installed:updated}!\${NC}"
            SERVER_IP=\$(hostname -I | awk '{print \$1}')
            echo -e "\${GREEN}Your API is accessible at: http://\$SERVER_IP\${NC}"
            
            echo -e "\\n\${YELLOW}To check service status:\${NC}"
            echo -e "systemctl status trademicro"
            
            echo -e "\\n\${YELLOW}To view logs:\${NC}"
            echo -e "journalctl -u trademicro"
        else
            echo -e "\${RED}Deployment failed. Service is not running.\${NC}"
            echo -e "\${YELLOW}Check logs with: journalctl -u trademicro\${NC}"
        fi
        EOF
        
        chmod +x server_deploy.sh
        
    - name: Deploy using sshpass
      run: |
        # Install sshpass
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        # Create SSH config with keepalive settings
        mkdir -p ~/.ssh
        cat > ~/.ssh/config << EOF
        Host *
          ServerAliveInterval 60
          ServerAliveCountMax 10
          TCPKeepAlive yes
        EOF
        chmod 600 ~/.ssh/config
        
        # Check if this is a first-time deployment or an update
        FIRST_DEPLOY=false
        sshpass -f ~/.ssh/password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "test -f /opt/trademicro/trademicro || echo 'first'" | grep -q "first" && FIRST_DEPLOY=true
        
        echo "First deployment: $FIRST_DEPLOY"
        
        # Copy files to server
        echo "Copying files to server ${{ secrets.SSH_HOST }}..."
        sshpass -f ~/.ssh/password.txt scp -o StrictHostKeyChecking=no trademicro ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        
        if [ "$FIRST_DEPLOY" = "true" ]; then
          # First-time deployment - copy and execute full deployment script
          echo "Performing first-time deployment..."
          sshpass -f ~/.ssh/password.txt scp -o StrictHostKeyChecking=no server_setup.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          sshpass -f ~/.ssh/password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /tmp && chmod +x server_setup.sh && sudo ./server_setup.sh"
        else
          # Update deployment - just update the binary
          echo "Performing binary update only..."
          sshpass -f ~/.ssh/password.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
          sudo systemctl stop trademicro
          sudo cp /tmp/trademicro /opt/trademicro/
          sudo chmod +x /opt/trademicro/trademicro
          sudo systemctl start trademicro
          echo "Binary updated and service restarted."
          ENDSSH
        fi
